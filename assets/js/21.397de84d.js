(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{49:function(e,t,a){"use strict";a.r(t);var n=a(0),c=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("p",[e._v("如果你已经能很熟练的使用React，我觉得学习Redux需要了解的基础知识，你应该都已经了解了。具体说来主要有以下内容；")]),a("p",[e._v("React（Redux是flux架构的实现，虽然其也可以配合其它框架使用，但是它和React可能还是更配一些吧）；")]),a("p",[e._v("基础的ES6知识（Redux重视函数式编程，会使得编程的结构看起来更加简洁）；")]),a("p",[e._v("用了ES6（甚至ES7）当然免不了要学习使用Webpack，Babel等；")]),a("p",[e._v("还有一点，我觉得学习编程应该不怕折腾，使用Redux管理一个状态可能需要改好几个文件里的代码才能实现，编程不再显得那么直接（比如 通过connect.js调用action.js里的某个action,并依据这个action触发reducer.js里面的某个reducer函数依据现有的state,创建一个新的state）,redux把一些操作给抽象化了，如果思维没有跟着改变，会让人有一种redux文档里面的东西我都看懂了，但是我怎么就是编不出来呢？那种痛苦的感觉。")]),a("h3",{attrs:{id:"学习使用redux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#学习使用redux","aria-hidden":"true"}},[e._v("#")]),e._v(" 学习使用Redux")]),a("p",[e._v("网上关于Redux的教程特别多了（官方文档写的特别好），学习新概念是比较恼人的一个过程，所以我还是会对Redux提供的api做一个简洁的描述，然后我会把我这段时间看过的我觉得比较好的文章的链接放在下面以供大家参考。")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Redux中的一些概念\nstate:app中的状态存放的地方，并且state是只读的，不同于React，Redux中state的更改，其实是创建了一个全新的state；\naction:是一个对象，作用和他的名字一样，用来表明，你想要做的那件事情，该对象的属性type，用来标记，你要做的事情；\nreducer:是一个函数，接收当前state，和一个action作为参数，依据action基于当前的state生成新的state;\ndispatch:推送某个action给reducer;\naction creater:一个创建action的函数，返回一个action对象；\n异步action：返回一个函数，和中间件配合可以很容易的实现异步操作；\nstore:可以理解为state的家，全局只有一个，有以下方法\ngetState():获取当前的state树；\ndispatch(action):触发一个action,创建state;\nsubscribe(listener):\nreplaceReducer(nextReducer)\ncombineRedecers(reducers)：当我们的应用比较复杂的时候，我们可能会分开写好几个reducer，这个函数的作用就是把这些单独的reduce合并为一个大的reduce，需要注意的是我们的state的结构和我们的各个reducer是一一对应的。\napplyMiddleware(...middlewares):告诉redux我们会用到那些中间件，比如说要用到基础的异步，我们会用到thunk中间件；\nlet store = createStore(\n    comReducer,\n    applyMiddleware(thunk)\n);\nbindActionCreators(actionCreators, dispatch):绑定actionCreator和dispatch以供直接使用；\n配合 React 使用Redux需要掌握的一些概念\nredux只是管理状态的一种方法，真的用在React里，使用作者提供的一个工具react-redux会更加方便，其api很简单，主要有以下几个；\n\n<Provider store>,嵌套在React组件的最外层，因此可以把state传给所有的组件（利用了React的context）；\n把React组件分为容器组件和UI组件两类，容器组件管理逻辑，UI组件管理显示效果二者通过connect方法连接，容器组件一般由UI组件依据connect生成；\nmapStateToProps()，存在于容器组件中，针对UI组件的各状态(依据state，或者父组件的props)生成；\nmapDispatchToProps()，存在于容器组件中，针对UI组件中的各可能改变state的事件定义的一系列的函数，依据props传给UI组件；\n")])]),a("p",[e._v("原文链接：http://www.jianshu.com/p/94d8f8a36ab0")])])}],!1,null,null,null);t.default=c.exports}}]);